{
	"name": "dataflow_csv_to_sql",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "csv_albums",
						"type": "DatasetReference"
					},
					"name": "albumscsv"
				},
				{
					"dataset": {
						"referenceName": "csv_artists",
						"type": "DatasetReference"
					},
					"name": "artistscsv"
				},
				{
					"dataset": {
						"referenceName": "csv_genre",
						"type": "DatasetReference"
					},
					"name": "genrecsv"
				},
				{
					"dataset": {
						"referenceName": "csv_labels",
						"type": "DatasetReference"
					},
					"name": "labelscsv"
				},
				{
					"dataset": {
						"referenceName": "csv_location",
						"type": "DatasetReference"
					},
					"name": "locationcsv"
				},
				{
					"dataset": {
						"referenceName": "csv_songs",
						"type": "DatasetReference"
					},
					"name": "songscsv"
				},
				{
					"dataset": {
						"referenceName": "csv_users",
						"type": "DatasetReference"
					},
					"name": "userscsv"
				},
				{
					"dataset": {
						"referenceName": "csv_songplays",
						"type": "DatasetReference"
					},
					"name": "songplayscsv"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sql_albums",
						"type": "DatasetReference"
					},
					"name": "albumstosql",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "sql_artists",
						"type": "DatasetReference"
					},
					"name": "artiststosql"
				},
				{
					"dataset": {
						"referenceName": "sql_genre",
						"type": "DatasetReference"
					},
					"name": "genretosql"
				},
				{
					"dataset": {
						"referenceName": "sql_labels",
						"type": "DatasetReference"
					},
					"name": "labelstosql"
				},
				{
					"dataset": {
						"referenceName": "sql_location",
						"type": "DatasetReference"
					},
					"name": "locationtosql"
				},
				{
					"dataset": {
						"referenceName": "sql_songs",
						"type": "DatasetReference"
					},
					"name": "songstosql"
				},
				{
					"dataset": {
						"referenceName": "sql_users",
						"type": "DatasetReference"
					},
					"name": "userstosql"
				},
				{
					"dataset": {
						"referenceName": "sql_songplays",
						"type": "DatasetReference"
					},
					"name": "songplaystosql"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          AlbumID as integer,",
				"          ArtistID as integer,",
				"          Name as string,",
				"          ReleaseDate as date,",
				"          LabelID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> albumscsv",
				"source(output(",
				"          ArtistID as integer,",
				"          Name as string,",
				"          DateCreated as date,",
				"          LocationID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> artistscsv",
				"source(output(",
				"          GenreID as integer,",
				"          Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> genrecsv",
				"source(output(",
				"          LabelID as integer,",
				"          Name as string,",
				"          LocationID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> labelscsv",
				"source(output(",
				"          LocationID as integer,",
				"          TimeZone as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> locationcsv",
				"source(output(",
				"          SongID as integer,",
				"          ArtistID as integer,",
				"          AlbumID as integer,",
				"          Title as string,",
				"          Duration as timestamp 'HH:mm:ss.00000',",
				"          ReleaseDate as date,",
				"          GenreID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> songscsv",
				"source(output(",
				"          UserID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Gender as string,",
				"          Email as string,",
				"          Password as string,",
				"          BirthDate as date,",
				"          DateCreated as date,",
				"          LocationID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> userscsv",
				"source(output(",
				"          SongPlayID as integer,",
				"          SongID as integer,",
				"          UserID as integer,",
				"          LocationID as integer,",
				"          StartTime as timestamp,",
				"          EndTime as timestamp,",
				"          {StartTime UTC} as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> songplayscsv",
				"albumscsv sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          AlbumID as integer,",
				"          ArtistID as integer,",
				"          Name as string,",
				"          ReleaseDate as date,",
				"          LabelID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['ALTER TABLE [dbo].Songs DROP CONSTRAINT FK_Songs_AlbumID;\\n','TRUNCATE TABLE [dbo].Albums;'],",
				"     postSQLs:['ALTER TABLE [dbo].Songs  WITH NOCHECK ADD  CONSTRAINT FK_Songs_AlbumID FOREIGN KEY(AlbumID)\\nREFERENCES [dbo].Albums (AlbumID)'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 4,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     outputAssertFailedRows: true,",
				"     mapColumn(",
				"          ArtistID,",
				"          Name,",
				"          ReleaseDate,",
				"          LabelID",
				"     )) ~> albumstosql",
				"artistscsv sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ArtistID as integer,",
				"          Name as string,",
				"          DateCreated as date,",
				"          LocationID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['ALTER TABLE [dbo].Albums DROP CONSTRAINT FK_Albuns_ArtistID;\\nALTER TABLE [dbo].Songs DROP CONSTRAINT FK_Songs_ArtistID;','TRUNCATE TABLE [dbo].Artists;'],",
				"     postSQLs:['ALTER TABLE [dbo].Albums  WITH NOCHECK ADD  CONSTRAINT FK_Albuns_ArtistID FOREIGN KEY(ArtistID)\\nREFERENCES [dbo].Artists (ArtistID);\\nALTER TABLE [dbo].Songs  WITH NOCHECK ADD  CONSTRAINT FK_Songs_ArtistID FOREIGN KEY(ArtistID)\\nREFERENCES [dbo].Artists (ArtistID);'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Name,",
				"          DateCreated,",
				"          LocationID",
				"     )) ~> artiststosql",
				"genrecsv sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          GenreID as integer,",
				"          Name as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['ALTER TABLE [dbo].Songs DROP CONSTRAINT FK_Songs_GenreID;\\n','TRUNCATE TABLE [dbo].Genre;'],",
				"     postSQLs:['ALTER TABLE [dbo].Songs  WITH NOCHECK ADD  CONSTRAINT FK_Songs_GenreID FOREIGN KEY(GenreID)\\nREFERENCES [dbo].Genre (GenreID)'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 5,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Name",
				"     )) ~> genretosql",
				"labelscsv sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LabelID as integer,",
				"          Name as string,",
				"          LocationID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['ALTER TABLE [dbo].Albums DROP CONSTRAINT [FK_Albuns_LabelID];','TRUNCATE TABLE [dbo].[Labels];'],",
				"     postSQLs:['ALTER TABLE [dbo].Albums  WITH NOCHECK ADD  CONSTRAINT [FK_Albuns_LabelID] FOREIGN KEY([LabelID])\\nREFERENCES [dbo].[Labels] ([LabelID])'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Name,",
				"          LocationID",
				"     )) ~> labelstosql",
				"locationcsv sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LocationID as integer,",
				"          TimeZone as string,",
				"          Country as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['ALTER TABLE [dbo].Artists DROP CONSTRAINT FK_Artists_LocationID;\\nALTER TABLE [dbo].Labels DROP CONSTRAINT FK_Labels_LocationID;\\nALTER TABLE [dbo].SongPlays DROP CONSTRAINT FK_SongPlays_LocationID;\\nALTER TABLE [dbo].Users DROP CONSTRAINT FK_Users_LocationID;','TRUNCATE TABLE [dbo].[Location];'],",
				"     postSQLs:['ALTER TABLE [dbo].Artists  WITH NOCHECK ADD  CONSTRAINT FK_Artists_LocationID FOREIGN KEY(LocationID)\\nREFERENCES [dbo].[Location] (LocationID);\\nALTER TABLE [dbo].Labels  WITH NOCHECK ADD  CONSTRAINT FK_Labels_LocationID FOREIGN KEY(LocationID)\\nREFERENCES [dbo].[Location] (LocationID);\\nALTER TABLE [dbo].SongPlays  WITH NOCHECK ADD  CONSTRAINT FK_SongPlays_LocationID FOREIGN KEY(LocationID)\\nREFERENCES [dbo].[Location] (LocationID);\\nALTER TABLE [dbo].Users  WITH NOCHECK ADD  CONSTRAINT FK_Users_LocationID FOREIGN KEY(LocationID)\\nREFERENCES [dbo].[Location] (LocationID);'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          TimeZone,",
				"          Country",
				"     )) ~> locationtosql",
				"songscsv sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SongID as integer,",
				"          ArtistID as integer,",
				"          AlbumID as integer,",
				"          Title as string,",
				"          Duration as timestamp,",
				"          ReleaseDate as date,",
				"          GenreID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['ALTER TABLE [dbo].[SongPlays] DROP CONSTRAINT [FK_SongPlays_SongID];','TRUNCATE TABLE [dbo].[Songs];'],",
				"     postSQLs:['ALTER TABLE [dbo].[SongPlays]  WITH NOCHECK ADD  CONSTRAINT [FK_SongPlays_SongID] FOREIGN KEY([SongID])\\nREFERENCES [dbo].[Songs] ([SongID])'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 6,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ArtistID,",
				"          AlbumID,",
				"          Title,",
				"          Duration,",
				"          ReleaseDate,",
				"          GenreID",
				"     )) ~> songstosql",
				"userscsv sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          UserID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Gender as string,",
				"          Email as string,",
				"          Password as string,",
				"          BirthDate as date,",
				"          DateCreated as date,",
				"          LocationID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['ALTER TABLE [dbo].[SongPlays] DROP CONSTRAINT [FK_SongPlays_UserID];','TRUNCATE TABLE [dbo].[Users];'],",
				"     postSQLs:['ALTER TABLE [dbo].[SongPlays]  WITH NOCHECK ADD  CONSTRAINT [FK_SongPlays_UserID] FOREIGN KEY([UserID])\\nREFERENCES [dbo].[Users] ([UserID])'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 7,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FirstName,",
				"          LastName,",
				"          Gender,",
				"          Email,",
				"          Password,",
				"          BirthDate,",
				"          DateCreated,",
				"          LocationID",
				"     )) ~> userstosql",
				"songplayscsv sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SongPlayID as integer,",
				"          SongID as integer,",
				"          UserID as integer,",
				"          LocationID as integer,",
				"          StartTime as timestamp,",
				"          EndTime as timestamp,",
				"          {StartTime UTC} as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 8,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SongPlayID,",
				"          SongID,",
				"          UserID,",
				"          LocationID,",
				"          StartTime,",
				"          EndTime,",
				"          {StartTime UTC},",
				"          Latitude,",
				"          Longitude",
				"     )) ~> songplaystosql"
			]
		}
	}
}